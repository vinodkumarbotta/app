pipeline {
    agent any
    stages {

       
                stage('Install frontend dependencies') {
                    steps {
                        dir('frontend'){ 
                            echo 'Installing dependencies...'
                            sh """rm -rf node_modules package-lock.json && npm install
                                  npm install -g chrome-launcher
                            """
                        }
                    }
                }            
                // stage('Build') {
                //     steps {
                //         dir('frontend'){ 
                //             // sh 'npm run build'
                //             echo "Build code"
                //         }
                        
                //     }
                // }
                stage('Frontend Sonar Code Analysis') {
                    environment {
                        scannerHome = tool 'sonar-scanner'
                    }
                    steps {
                        dir('frontend'){ 
                            withSonarQubeEnv(credentialsId: 'jenkins-sonar-token') {
                                 sh """
                               ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.organization=hubler-test-proj \
                                -Dsonar.projectKey=hubler-test \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://172.31.12.61:9000
                            """
                            }
                           
                        }
                    }
                }
                stage("Quality Gate"){
                    steps {
                        script {
                            timeout(time: 1, unit: 'HOURS') {
                                def qg = waitForQualityGate()
                                if (qg.status != 'OK') {
                                    error "Pipeline aborted due to quality gate failure: ${qg.status}"
                                }
                            }

                        }
                       
                    }
                }
                stage ('ES Linting') {
                    steps {
                        dir('frontend'){ 
                            sh """ ./node_modules/eslint/bin/eslint.js -f checkstyle src > eslint.xml
                                   ls -lrt 
                            """
                        }
                        
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: 'frontend/eslint.xml')
                        }
                    }
                }
        stage('Install backend dependencies') {
            steps {
                dir('backend'){ 
                   sh "python3 -m pip install -r package-lock.txt"
                }
            }
        }
        stage('Build backend dependencies') {
            steps {
                dir('backend'){ 
                   sh "ppm install"
                }
            }
        }

        stage('Deploy app Dev') {
            steps {
                echo "Deploying into Dev Evnironment"
            }
        }

        stage('Run Lighthouse on Dev') {
            steps {
               sh "sh CICD/lighthouse.sh http://www.lighttpd.net"
            }
        }

        
    }
    post {
        always {
            cleanWs()
        }
    }
}
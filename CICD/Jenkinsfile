pipeline {
    agent any
    stages {

        // stage('Build Frontend'){
            // parallel {
                stage('Install dependencies') {
                    steps {
                        dir('frontend'){ 
                            echo 'Installing dependencies...'
                            sh 'rm -rf node_modules package-lock.json && npm install'
                        }
                    }
                }            
                // stage('Build') {
                //     steps {
                //         dir('frontend'){ 
                //             sh 'npm run build'
                //         }
                        
                //     }
                // }
                stage('Frontend Code Analysis') {
                    steps {
                        dir('frontend'){ 
                            def scannerHome = tool 'sonar-scanner'
                            sh """
                               ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.organization=app-test-demo \
                                -Dsonar.projectKey=app-test-proj-frontend \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=https://sonarcloud.io \
                                -Dsonar.token=d398500f8060e9da54ca5f802eb0cc5750f1ad13
                            """
                        }
                        
                    }
                }
                stage ('Static Analysis') {
                    steps {
                        dir('frontend'){ 
                            sh ' ./node_modules/eslint/bin/eslint.js -f checkstyle src > eslint.xml'
                        }
                        
                    }
                    post {
                        always {
                            recordIssues enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: 'eslint.xml')
                        }
                    }
                }
            // }

        // }
        stage('Build Backend') {
            steps {
                dir('frontend'){ 
                   sh "ls -lrt"
                }
            }
        }
        
    }
    post {
        always {
            cleanWs()
        }
    }
}
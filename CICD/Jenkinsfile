pipeline {
    agent any
    stages {

       
        stage('Install dependencies') {
            steps {
                dir('frontend'){ 
                    echo 'Installing frontend dependencies...'
                    sh """rm -rf node_modules package-lock.json && npm install
                    """
                }
                dir('backend'){ 
                    echo 'Installing backend dependencies...'
                    sh "python3 -m pip install -r package-lock.txt"
                }
            }
        }            
        stage('Build') {
            steps {
                dir('frontend'){ 
                    sh 'npm run build'
                }
                
            }
        }
        stage('Unit-Testing') {
            steps {
                dir('frontend'){ 
                    sh 'npm run test'
                }
                
            }
        }
        stage('Sonar-Analysis-Frontend') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                dir('frontend'){ 
                    withSonarQubeEnv('SonarQubeServer') {
                            sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.organization=hubler-test-proj \
                        -Dsonar.projectKey=hubler-frontend-test \
                        -Dsonar.sources=. \
                    """
                    }
                    
                }
            }
        }
        stage("Quality-Gate-Frontend"){
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }

                }
                
            }
        }
        stage ('ES Linting') {
            steps {
                dir('frontend'){ 
                    sh """ ./node_modules/eslint/bin/eslint.js -f checkstyle src > eslint.xml
                            ls -lrt 
                    """
                }
                
            }
            post {
                always {
                    recordIssues enabledForFailure: true, aggregatingResults: true, tool: checkStyle(pattern: 'frontend/eslint.xml')
                }
            }
        }
        
        stage('Sonar-Analysis-Backend') {
            environment {
                scannerHome = tool 'sonar-scanner'
            }
            steps {
                dir('backend'){ 
                    withSonarQubeEnv('SonarQubeServer') {
                            sh """
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.organization=hubler-test-proj \
                        -Dsonar.projectKey=hubler-backend-test \
                        -Dsonar.sources=. \
                    """
                    }
                    
                }
            }
        }
        stage("Quality-Gate-Backend"){
            steps {
                script {
                    timeout(time: 1, unit: 'HOURS') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }

                }
                
            }
        }

        stage('Deploy app Dev') {
            steps {
                echo "Deploying into Dev Evnironment"
            }
        }

        stage('Run Lighthouse') {
            steps {
                sh 'npx lighthouse-ci https://www.hubler.app --jsonReport --report=.'
                lighthouseReport file: './report.json', name: 'My Report'
            }
        }
        
    }
    post {
        always {
            cleanWs()
        }
    }
}